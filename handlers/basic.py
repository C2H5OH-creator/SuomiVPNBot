from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import get_main_keyboard, get_lk_keyboard, get_admin_keyboard
from utils.db import add_or_update_user, add_complaint, get_all_complaints, delete_complaint
from config import ADMINS

class ComplaintStates(StatesGroup):
    waiting_for_complaint = State()
    waiting_for_reply = State()

class NotificationStates(StatesGroup):
    waiting_for_notification = State()

async def send_complaint_notification(bot, complaint_id: int | None, user_name: str, user_id: int, complaint_text: str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    notification = f"üÜï –ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê #{complaint_id}\n\n"
    notification += f"üë§ –û—Ç: {user_name}\n"
    notification += f"üÜî ID: {user_id}\n"
    notification += f"üìù –¢–µ–∫—Å—Ç: {complaint_text}\n\n"
    notification += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∂–∞–ª–æ–± –Ω–∞–∂–º–∏—Ç–µ '–ñ–∞–ª–æ–±—ã' –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"complaint_done_{complaint_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"complaint_cancel_{complaint_id}"))
    builder.add(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"complaint_reply_{complaint_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="üôà –°–∫—Ä—ã—Ç—å", callback_data=f"complaint_hide_{complaint_id}"))
    builder.adjust(2, 2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, notification, reply_markup=builder.as_markup())
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

router = Router()
ping_countdown = 0

@router.message(Command("start"))
async def cmd_start(message: Message):
    if message.from_user:
        await add_or_update_user(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            until="2024-12-31",
            config=None
        )
    
    keyboard = get_main_keyboard(message.from_user.id if message.from_user else None)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –Ø –≤–∞—à VPN –±–æ—Ç.',
        reply_markup=keyboard
    )

@router.message(F.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def handle_lk_button(message: Message):
    keyboard = get_lk_keyboard()
    await message.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=keyboard)

@router.message(F.text == '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def handle_admin_panel_button(message: Message):
    keyboard = get_admin_keyboard()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

@router.message(F.text == '‚Üê –ù–∞–∑–∞–¥')
async def handle_back_button(message: Message):
    keyboard = get_main_keyboard(message.from_user.id if message.from_user else None)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

@router.message(F.text == '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ')
async def handle_complaint_button(message: Message, state: FSMContext):
    await state.set_state(ComplaintStates.waiting_for_complaint)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –í—Å—ë, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ, –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –∂–∞–ª–æ–±–∞.")

@router.message(ComplaintStates.waiting_for_complaint)
async def handle_complaint_text(message: Message, state: FSMContext):
    if message.from_user:
        user_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
        if not user_name:
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}"
        
        complaint_id = await add_complaint(
            user_id=message.from_user.id,
            user_name=user_name,
            complaint_text=message.text
        )
        
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await send_complaint_notification(message.bot, complaint_id, user_name, message.from_user.id, message.text)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã.")
        await state.clear()

@router.message(ComplaintStates.waiting_for_reply)
async def handle_reply_media(message: Message, state: FSMContext):
    from utils.db import send_reply_to_user, get_user, get_complaint_by_user_id
    
    data = await state.get_data()
    user_id = data.get('reply_user_id')
    
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    complaint = await get_complaint_by_user_id(user_id)
    complaint_date = complaint[4] if complaint else None  # created_at - 5-–π —ç–ª–µ–º–µ–Ω—Ç
    
    success = False
    reply_text = None
    media_type = None
    file_id = None
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text:
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_text = message.text
        success = await send_reply_to_user(message.bot, user_id, reply_text, complaint_date=complaint_date)
        
    elif message.photo:
        # –§–æ—Ç–æ
        file_id = message.photo[-1].file_id
        media_type = "photo"
        reply_text = message.caption
        success = await send_reply_to_user(message.bot, user_id, reply_text, media_type, file_id, complaint_date)
        
    elif message.video:
        # –í–∏–¥–µ–æ
        file_id = message.video.file_id
        media_type = "video"
        reply_text = message.caption
        success = await send_reply_to_user(message.bot, user_id, reply_text, media_type, file_id, complaint_date)
        
    elif message.document:
        # –î–æ–∫—É–º–µ–Ω—Ç/—Ñ–∞–π–ª
        file_id = message.document.file_id
        media_type = "document"
        reply_text = message.caption
        success = await send_reply_to_user(message.bot, user_id, reply_text, media_type, file_id, complaint_date)
        
    elif message.voice:
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_id = message.voice.file_id
        media_type = "voice"
        reply_text = message.caption
        success = await send_reply_to_user(message.bot, user_id, reply_text, media_type, file_id, complaint_date)
        
    elif message.sticker:
        # –°—Ç–∏–∫–µ—Ä
        file_id = message.sticker.file_id
        media_type = "sticker"
        reply_text = message.caption
        success = await send_reply_to_user(message.bot, user_id, reply_text, media_type, file_id, complaint_date)
        
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()
        return
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        user = await get_user(user_id)
        if user:
            user_id, first_name, last_name, subscription_until, config_path = user
            full_name = f"{first_name or ''} {last_name or ''}".strip()
            if not full_name:
                full_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name}")
        else:
            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    await state.clear()

@router.message(NotificationStates.waiting_for_notification)
async def handle_notification_media(message: Message, state: FSMContext):
    from utils.db import get_all_users, send_notification_to_user
    
    users = await get_all_users()
    users_list = list(users) if users else []
    if not users_list:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
        await state.clear()
        return
    
    success_count = 0
    error_count = 0
    notification_text = None
    media_type = None
    file_id = None
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text:
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = message.text
        for user in users_list:
            user_id = user[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - user_id
            success = await send_notification_to_user(message.bot, user_id, notification_text)
            if success:
                success_count += 1
            else:
                error_count += 1
                
    elif message.photo:
        # –§–æ—Ç–æ
        file_id = message.photo[-1].file_id
        media_type = "photo"
        notification_text = message.caption
        for user in users_list:
            user_id = user[0]
            success = await send_notification_to_user(message.bot, user_id, notification_text, media_type, file_id)
            if success:
                success_count += 1
            else:
                error_count += 1
                
    elif message.video:
        # –í–∏–¥–µ–æ
        file_id = message.video.file_id
        media_type = "video"
        notification_text = message.caption
        for user in users_list:
            user_id = user[0]
            success = await send_notification_to_user(message.bot, user_id, notification_text, media_type, file_id)
            if success:
                success_count += 1
            else:
                error_count += 1
                
    elif message.document:
        # –î–æ–∫—É–º–µ–Ω—Ç/—Ñ–∞–π–ª
        file_id = message.document.file_id
        media_type = "document"
        notification_text = message.caption
        for user in users_list:
            user_id = user[0]
            success = await send_notification_to_user(message.bot, user_id, notification_text, media_type, file_id)
            if success:
                success_count += 1
            else:
                error_count += 1
                
    elif message.voice:
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_id = message.voice.file_id
        media_type = "voice"
        notification_text = message.caption
        for user in users_list:
            user_id = user[0]
            success = await send_notification_to_user(message.bot, user_id, notification_text, media_type, file_id)
            if success:
                success_count += 1
            else:
                error_count += 1
                
    elif message.sticker:
        # –°—Ç–∏–∫–µ—Ä
        file_id = message.sticker.file_id
        media_type = "sticker"
        notification_text = message.caption
        for user in users_list:
            user_id = user[0]
            success = await send_notification_to_user(message.bot, user_id, notification_text, media_type, file_id)
            if success:
                success_count += 1
            else:
                error_count += 1
                
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    report = f"üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n\n"
    report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
    report += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
    report += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_list)}"
    
    await message.answer(report)
    await state.clear()

@router.message(F.text == 'ping')
async def handle_ping_button(message: Message):
    global ping_countdown
    if ping_countdown == 69:
        try:
            photo = types.FSInputFile('src/test.jpg')
            await message.answer_photo(photo)
            ping_countdown = 0
        except FileNotFoundError:
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        ping_countdown += 1
        await message.answer('pong')

@router.message(F.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def handle_users_button(message: Message):
    from utils.db import get_all_users
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    users = await get_all_users()
    
    if users:
        builder = InlineKeyboardBuilder()
        
        for user in users:
            user_id, first_name, last_name, subscription_until, config_path = user
            full_name = f"{first_name or ''} {last_name or ''}".strip()
            if not full_name:
                full_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            
            builder.add(InlineKeyboardButton(
                text=full_name,
                callback_data=f"user_{user_id}"
            ))
        
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=builder.as_markup())
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

@router.message(F.text == '–ñ–∞–ª–æ–±—ã')
async def handle_complaints_button(message: Message):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    complaints = await get_all_complaints()
    
    if complaints:
        for complaint in complaints:
            complaint_id, user_id, user_name, complaint_text, created_at = complaint
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–π –∂–∞–ª–æ–±—ã
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"complaint_done_{complaint_id}"))
            builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"complaint_cancel_{complaint_id}"))
            builder.add(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"complaint_reply_{complaint_id}_{user_id}"))
            builder.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            
            response = f"üìã –ñ–∞–ª–æ–±–∞ #{complaint_id}\n\n"
            response += f"üë§ –û—Ç: {user_name}\n"
            response += f"üÜî ID: {user_id}\n"
            response += f"üìù –¢–µ–∫—Å—Ç: {complaint_text}\n"
            response += f"üìÖ –î–∞—Ç–∞: {created_at}"
            
            await message.answer(response, reply_markup=builder.as_markup())
    else:
        await message.answer("–ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç.")

@router.message(F.text == 'üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ')
async def handle_notification_button(message: Message, state: FSMContext):
    await state.set_state(NotificationStates.waiting_for_notification)
    await message.answer(
        "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∏–∫–µ—Ä—ã"
    )

@router.callback_query(lambda c: c.data.startswith('user_'))
async def handle_user_callback(callback_query):
    from utils.db import get_user
    
    user_id = int(callback_query.data.split('_')[1])
    user = await get_user(user_id)
    
    if user:
        user_id, first_name, last_name, subscription_until, config_path = user
        full_name = f"{first_name or ''} {last_name or ''}".strip()
        if not full_name:
            full_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        response += f"ID: {user_id}\n"
        response += f"–ò–º—è: {full_name}\n"
        response += f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {subscription_until}\n"
        response += f"–ö–æ–Ω—Ñ–∏–≥: {config_path or '–ù–µ —Å–æ–∑–¥–∞–Ω'}"
        
        await callback_query.message.answer(response)
    else:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('complaint_'))
async def handle_complaint_callback(callback_query, state: FSMContext):
    data = callback_query.data.split('_')
    action = data[1]
    complaint_id = int(data[2])
    
    if action == "done":
        # –£–¥–∞–ª—è–µ–º –∂–∞–ª–æ–±—É –∏–∑ –ë–î
        await delete_complaint(complaint_id)
        await callback_query.message.edit_text(
            callback_query.message.text + "\n\n‚úÖ –û–¢–ú–ï–ß–ï–ù–û –ö–ê–ö –í–´–ü–û–õ–ù–ï–ù–û"
        )
        await callback_query.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")
        
    elif action == "cancel":
        # –£–¥–∞–ª—è–µ–º –∂–∞–ª–æ–±—É –∏–∑ –ë–î
        await delete_complaint(complaint_id)
        await callback_query.message.edit_text(
            callback_query.message.text + "\n\n‚ùå –û–¢–ú–ï–ù–ï–ù–û"
        )
        await callback_query.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")
        
    elif action == "reply":
        user_id = int(data[3])
        await state.update_data(reply_user_id=user_id)
        await state.set_state(ComplaintStates.waiting_for_reply)
        await callback_query.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await callback_query.message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–∏–∫–µ—Ä—ã"
        )
        
    elif action == "hide":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∂–∞–ª–æ–±—É –∏–∑ –ë–î
        await callback_query.message.delete()
        await callback_query.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
